#!/usr/bin/env python2.7
from csv import reader
from pyspark import SparkContext
import re
sc = SparkContext(appName="spark_spotify") 
sc.setLogLevel("ERROR")

# read input data from HDFS to create an RDD
data = sc.textFile("hdfs://group3-1:54310/spotifyData/")
# use csv reader to split each line of file into a list of elements. 
# this will automatically split the csv data correctly.
splitdata = data.mapPartitions(lambda x: reader(x))
topRow = ["title", "all_artists", "popularity", "release_date", "danceability", "energy", "key", "loudness", "mode", "acousticness", "instrumentalness", "liveness", "valence", "tempo", "duration_ms", "time_signature"]
# use filter to select only those rows in which dates is not blank
splitdata = splitdata.filter(lambda x: x[3]).filter(lambda x: x != topRow)

topArtists = splitdata.map(lambda x: (x[1], 1)).reduceByKey(lambda x,y: x+y).sortBy(lambda x: x[1], ascending=False).take(20)
print("The top 20 Artists:")
for x in topArtists:
  print('~!\t%s' % (x[0]))

topSongs = splitdata.map(lambda x: ((x[0], x[1], x[2]), 1)).distinct().reduceByKey(lambda x,y: x+y).sortBy(lambda x: x[0][2], ascending=False).take(20)
print("()()()The top 20 songs currently in the playlist(in a scale of 0-100):")
for x in topSongs:
  print('~!\t"%s" by %s - %s' % (x[0][0], x[0][1], x[0][2]))

longestSongs = splitdata.map(lambda x: ((x[0], x[1], x[14]), 1)).distinct().reduceByKey(lambda x,y: x+y).sortBy(lambda x: x[0][2], ascending= False).take(22)
print("()()()The top 20 songs with long duration are:")
for x in longestSongs[2:]:
  print('~!\t"%s" by %s - %s' % (x[0][0], x[0][1], x[0][2]))

danceabilitySongs = splitdata.map(lambda x: ((x[0], x[1], x[4]),1)).distinct().reduceByKey(lambda x,y: x+y).sortBy(lambda x: x[0][2], ascending= False).take(20)
print("()()()The top danceability songs(scale of 0-1):")
for x in danceabilitySongs:
  print('~!\t"%s" by %s - %s' % (x[0][0], x[0][1], x[0][2]))
  
mostSongs= None
mostMonth= None

for x in range(12):
  x=x+1
  xMonth = splitdata.filter(lambda line: re.search(r"^\b%s\/\b" %x, line[3]))
  month= xMonth.map(lambda x: ((x[0], x[1], x[3], x[2]), 1)).sortBy(lambda x: x[0][2], ascending=True).sortBy(lambda x: x[0][3]).count()
  if month > mostSongs:
    mostSongs= month
    mostMonth = x
print("()()()In this playlist, the highest number of songs were released the month of %s with %s songs." % (mostMonth, mostSongs))
sc.stop()


